{"version":3,"sources":["components/functional/Tab/Tab.js","components/containers/Tabs/Tabs.js","constants/contactListConfig.js","components/functional/UserContactListItem/UserContactListItem.js","components/containers/ContactList/ContactList.js","store/actions/index.js","store/actions/action-types.js","App.js","store/reducers/index.js","store/index.js","index.js"],"names":["StyledTab","styled","li","props","cssBorderWidth","SmallRemark","span","Tab","activeTab","label","categoryEntries","onClick","TabsTitleContainer","ul","TabsContentContainer","Tabs","handleTabClick","tab","onTabChange","setState","renderTabsLabels","tabsData","map","tabLable","key","renderTabContets","filter","tabData","tabContent","children","state","this","className","Component","contactListConfig","Close","UserShortInfo","p","fontSize","cssMargin","cssCursor","UserContainer","breakpoint","UserDetailedInfo","div","direction","cssDisplay","cssPosition","cssShadow","UserImage","img","UserContactListItem","user","handleContactClick","userListIndex","showDetailed","name","first","last","src","picture","large","login","username","email","phone","location","street","number","city","postcode","Title","h2","ContactList","contactIndex","activeUserCardIndex","renderUsersData","users","index","renderTabs","data","length","getContactsList","contacts","tabsContent","React","connect","config","dispatch","fetch","userUrl","numberCards","then","response","json","type","categoriesArray","usersList","categories","reduce","acc","next","formattedUserList","userCategory","charAt","toLowerCase","push","Object","values","normalizeContactList","tabs","results","App","InitialState","createStore","action","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.55fdba07.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const StyledTab = styled.li`\r\n    display: block;\r\n    cursor: pointer;\r\n    padding: 5px 10px 10px 10px;\r\n    text-align: center;\r\n    border-bottom: ${ props => props.cssBorderWidth || '1px' } solid grey;\r\n    margin: 0 2px;\r\n    font-size: 20px;\r\n`\r\nconst SmallRemark = styled.span`\r\n    font-size: 10px;\r\n    padding: 4px;\r\n`\r\n/**\r\n * Renders single tab with attached call back function\r\n * @param {Object} props - react component props object\r\n * @property {String} activeTab - ative tab label\r\n * @property {String} label - current tab label\r\n * @callback onClick - function with current tab label as argument\r\n * @returns {Object} - react Tab component\r\n */\r\nfunction Tab(props) {\r\n    const { activeTab, label, categoryEntries } = props;\r\n    return (\r\n        <StyledTab cssBorderWidth={activeTab === label ? '2px' : '1px'} \r\n        onClick={() => props.onClick(label)} >\r\n            {label}\r\n            <SmallRemark>{categoryEntries}</SmallRemark>\r\n        </StyledTab>\r\n    );\r\n}\r\n\r\nTab.propTypes = {\r\n    activeTab: PropTypes.string,\r\n    label: PropTypes.string,\r\n    onClick: PropTypes.func,\r\n};\r\n\r\nexport default Tab","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tab from 'components/functional/Tab/Tab';\r\nimport styled from 'styled-components';\r\n\r\nconst TabsTitleContainer = styled.ul`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    list-style: none;\r\n    justify-content: left;\r\n    width: fit-content;\r\n    margin: 0 auto;\r\n    padding: 0 20px;\r\n`;\r\n\r\nconst TabsContentContainer = styled.ul`\r\n    display: flex;\r\n    list-style: none;\r\n    padding: 0 20px;\r\n    flex-wrap: wrap;\r\n`\r\n/**\r\n * Creates Tabs based on passed children attributes\r\n * Single tab will be created for each passed <div lable=\"tabLable\"> tab content </div> as child\r\n */\r\nclass Tabs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeTab: this.props.children[0].props.label,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Updateds information about current active tab\r\n   * triggers onTabChange callback function passed in props\r\n   * @param {String} tab - tab lable\r\n   * @returns {Void}\r\n   */\r\n  handleTabClick = (tab) => {\r\n    const { onTabChange } = this.props;\r\n    this.setState({ activeTab: tab });\r\n    onTabChange();\r\n  }\r\n\r\n  /**\r\n   * Rendreds tabs lables\r\n   * @param {ReactNode} tabsData - array with tabs child objectsreact children collection\r\n   * @example <div lable=\"tabLable\"> tab content </div>\r\n   * @returns {ReactNode} tabs lables react components collection\r\n   */\r\n  renderTabsLabels = (tabsData, activeTab) => {\r\n        return tabsData.map(tabLable => {\r\n            const { label, categoryEntries } = tabLable.props;\r\n            return(\r\n                <Tab\r\n                    activeTab={activeTab}\r\n                    key={label}\r\n                    label={label}\r\n                    categoryEntries={categoryEntries}\r\n                    onClick={this.handleTabClick}\r\n                />\r\n            )\r\n        })\r\n    }\r\n    /**\r\n     * Filters passed down children to reflect current active tab\r\n     * @param {ReactNode} tabsData - react children collection\r\n     * @param {String} activeTab - current active tab\r\n     * @returns {ReactNode} tab content - react components collection\r\n     */\r\n    renderTabContets = (tabsData, activeTab) => {\r\n        return tabsData.filter((tabData) => tabData.props.label === activeTab)\r\n        .map(tabContent => tabContent.props.children);\r\n    } \r\n\r\n  render() {\r\n    const { renderTabsLabels, renderTabContets } = this;\r\n    const { activeTab } = this.state;\r\n    const { children } = this.props;\r\n    return (\r\n      <div className=\"tabs\">\r\n        <TabsTitleContainer className=\"tab-names\">\r\n            {renderTabsLabels(children, activeTab)}\r\n        </TabsTitleContainer>\r\n        <TabsContentContainer>\r\n          {renderTabContets(children, activeTab)}\r\n        </TabsContentContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTabs.propTypes = {\r\n  children: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Tabs","export const contactListConfig = {\r\n    \"title\": \"Contact List\",\r\n    \"userUrl\": \"https://api.randomuser.me\",\r\n    \"numberCards\": 120,\r\n    \"tabs\": [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\r\n  };","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport breakpoint from 'styled-components-breakpoint';\r\n\r\nexport const Close = styled.span`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 5;\r\n    width: 15px;\r\n    height: 15px;\r\n    opacity: 0.3;\r\n    z-index: 3;\r\n    cursor: pointer;\r\n    \r\n    ::Before, ::after {\r\n        position: absolute;\r\n        left: 7px;\r\n        content: ' ';\r\n        height: 15px;\r\n        width: 2px;\r\n        background-color: #333;\r\n    }\r\n\r\n    ::before {\r\n        transform: rotate(45deg);\r\n    }\r\n\r\n    ::after {\r\n        transform: rotate(-45deg);\r\n    }\r\n`;\r\n\r\nexport const UserShortInfo = styled.p`\r\n    font-size: ${ props => props.fontSize || null };\r\n    margin: ${ props => props.cssMargin || 0 };\r\n    border-bottom: 1px solid lightgrey;\r\n    margin-right: 20px;\r\n    padding-bottom: 5px;\r\n    word-break: break-all;\r\n    cursor: ${ props => props.cssCursor || \"default\" };\r\n`\r\nexport const UserContainer = styled.li`\r\n    display:block;\r\n    width: 100%;\r\n    position: relative;\r\n    ${breakpoint('desktop')`\r\n        width: 50%;\r\n    `}\r\n`\r\nexport const UserDetailedInfo = styled.div`\r\n    flex-direction: ${props => props.direction || 'row'};\r\n    transition: all 0.5s ease-out;\r\n    overflow: hidden;\r\n    display: ${props => props.cssDisplay || 'flex'};\r\n    position: ${props => props.cssPosition || 'static' };\r\n    width: 100%;\r\n    background: #fff;\r\n    z-index: 2;\r\n    padding: 10px 10px 20px 10px;\r\n    ${props => props.cssShadow ? \"box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.15);\" : null}\r\n`\r\nexport const UserImage = styled.img`\r\n    height: 128px;\r\n    margin-right: 20px;\r\n    border-radius: 100%;\r\n`;\r\n\r\n/**\r\n * Renders user list data component with attached callback function on close and user short info click\r\n * @param {Object} props - component props\r\n * @property {Object} user - user data object\r\n * @callback handleContactClick - call back function with user index argument\r\n * @property {number} userListIndex - user list index\r\n * @property {bollean} showDetailed - is detailed card expanded\r\n * @returns {Object} UserContactListItem - react component\r\n */\r\nfunction UserContactListItem(props) {\r\n    const { user, handleContactClick, userListIndex, showDetailed } = props;\r\n    return (\r\n        <UserContainer>\r\n            <UserShortInfo\r\n            onClick={() => handleContactClick(userListIndex)}\r\n            cssCursor={showDetailed ? 'default' : \"pointer\"}>\r\n                {user.name.first}, {user.name.last}  \r\n            </UserShortInfo>\r\n            <UserDetailedInfo \r\n             cssPosition=\"absolute\"\r\n             cssShadow={true}\r\n             cssDisplay={ showDetailed ? \"flex\" : \"none\"}>\r\n             <Close onClick={() => handleContactClick(null)} />\r\n             <UserImage src={user.picture.large}/>\r\n             <UserDetailedInfo direction=\"column\">\r\n                <UserShortInfo>\r\n                     <strong>Username:</strong> {user.login.username}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo>\r\n                     <strong>Email:</strong> {user.email}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo >\r\n                     <strong>Phone:</strong> {user.phone}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo>\r\n                    <strong>Street:</strong> {user.location.street.name} {user.location.street.number}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo>\r\n                    <strong>City:</strong> {user.location.city}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo>\r\n                     <strong>State:</strong> {user.location.state}\r\n                 </UserShortInfo>\r\n                 <UserShortInfo>\r\n                     <strong>Postcode:</strong> {user.location.postcode}\r\n                 </UserShortInfo>\r\n             </UserDetailedInfo>\r\n         </UserDetailedInfo>\r\n     </UserContainer>\r\n    );\r\n}\r\n\r\nUserContactListItem.propTypes = {\r\n    showDetailed: PropTypes.bool,\r\n    userListIndex: PropTypes.number,\r\n    handleContactClick: PropTypes.func,\r\n    user: PropTypes.object\r\n};\r\n\r\nexport default UserContactListItem","import React from 'react';\r\nimport Tabs from 'components/containers/Tabs/Tabs';\r\nimport { connect } from 'react-redux';\r\nimport { getContactsList } from 'store/actions';\r\nimport { contactListConfig } from 'constants/contactListConfig';\r\nimport UserContactListItem from 'components/functional/UserContactListItem/UserContactListItem'\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Title = styled.h2`\r\n    text-align: center;\r\n    font-weight: 100;\r\n`\r\n\r\n/**\r\n * Creates user contact list fetched from server via store action by provided configuration to arrange fetched contacts\r\n * with categorization of user contacts by last name first letter\r\n * splited in tabs with letter as tab label and contact name, last name in short description in tab content\r\n * provides detailed contact information by clicking on contact short description to only one contact entry.\r\n */\r\nclass ContactList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            activeUserCardIndex: null\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update current open contact index\r\n     * @param {Number} contactIndex - current open datailed contact index in current tab\r\n     * @returns {Void}\r\n     */\r\n    handleContactClick = (contactIndex) => {\r\n        this.setState({\r\n            activeUserCardIndex: contactIndex\r\n        })\r\n    };\r\n\r\n    /**\r\n     * Renders user contact data in short / detaild format\r\n     * @param {array} users - current tab contacts\r\n     * @returns {Array} users contacts react components collection\r\n     */\r\n    renderUsersData = (users) => {\r\n        const { activeUserCardIndex } = this.state;\r\n        const { handleContactClick } = this;\r\n        return users && users.map((user, index) => {\r\n            return(\r\n                <UserContactListItem \r\n                user={user}\r\n                userListIndex={index}\r\n                handleContactClick={handleContactClick} \r\n                showDetailed={activeUserCardIndex === index} \r\n                key={index}  />\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Prepares content to be passed to the Tabs component\r\n     * @param {Array} tabsData - array of tabs obejcts. tab Object example:\r\n     * @example {label: 'a', data: [...{...contactData}]}\r\n     * @returns {Array} users contacts react components collection\r\n     */\r\n    renderTabs = (tabsData) => {\r\n        const { renderUsersData } = this;\r\n        return tabsData.map(tabData => {\r\n            return (\r\n                <div label={tabData.label} categoryEntries={tabData.data.length} key={tabData.label}>\r\n                   {renderUsersData(tabData.data)}\r\n                </div>\r\n            )\r\n        }) \r\n    }\r\n\r\n    componentDidMount() {\r\n        // fetch contacts based on contactListConfig file\r\n        this.props.getContactsList(contactListConfig);\r\n    }\r\n\r\n    render() {\r\n        const { contacts } = this.props;\r\n        const { handleContactClick, renderTabs } = this;\r\n        const tabsContent = renderTabs(contacts);\r\n        return (\r\n            <div className='contact-list-container'>\r\n                <Title>Contact list</Title>\r\n                {tabsContent.length && <Tabs onTabChange={() => handleContactClick(null)}>{tabsContent}</Tabs>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapState = (state) => {\r\n    return {\r\n        contacts: state.contacts\r\n    }\r\n}\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array,\r\n    contactIndex: PropTypes.func\r\n};\r\n\r\nexport default connect(mapState, { getContactsList })(ContactList);","import { GET_CONTACTS_LIST } from './action-types';\r\n\r\nexport const updateContacts = (payload) => {\r\n    return { \r\n        type: GET_CONTACTS_LIST, \r\n        data: payload\r\n    }\r\n};\r\n\r\n/**\r\n * Normalize & categorize contacts data\r\n * @param { Array } categoriesArray -  plain array of category names  \r\n * @param { Array } usersList - array of contacts objects\r\n * @returns {Array} array of object split by categories\r\n */\r\nconst normalizeContactList = (categoriesArray, usersList) => {\r\n    // create object out of categories names where category name == key\r\n    const categories = categoriesArray.reduce((acc, next) => {\r\n       acc[`${next}`] = {\r\n            label: next,\r\n            data: []\r\n        }\r\n        return acc\r\n    },{})\r\n    // map / reduce - contacts on to categories by user name first letter == category key\r\n    const formattedUserList = usersList.reduce((acc, user) => {\r\n        const userCategory = user.name.last.charAt(0).toLowerCase();\r\n        acc[userCategory] && acc[userCategory].data.push(user); // skip users with non latin names\r\n        return acc;\r\n    }, categories)\r\n    // convert object {key: data} into array of categories with contacts\r\n    return Object.values(formattedUserList)\r\n}\r\n\r\n/**\r\n * Fetch contacts from server && normalize response for tabs display\r\n * @param {Object} config - request configuration object\r\n * @example { userUrl:<string> url, numberCards:<number> number, tabs: <[]<string>> array}\r\n */\r\nexport const getContactsList = (config) => {\r\n    return (dispatch) => {\r\n        return fetch(`${config.userUrl}?results=${config.numberCards}`)\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            dispatch(updateContacts(normalizeContactList(config.tabs, response.results)))\r\n        })\r\n    }\r\n}","export const GET_CONTACTS_LIST = 'GET_CONTACTS_LIST';","import React from 'react';\nimport ContactList from './components/containers/ContactList/ContactList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { GET_CONTACTS_LIST } from 'store/actions/action-types';\r\n\r\nconst InitialState = {\r\n    contacts: []\r\n}\r\n\r\nexport const contactsReducer = (state = InitialState, action) => {\r\n    switch(action.type) {\r\n        case GET_CONTACTS_LIST:\r\n        return {\r\n            ...state,\r\n            contacts: action.data\r\n        }\r\n        default:\r\n        return state\r\n    }\r\n    \r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { contactsReducer } from 'store/reducers';\r\n\r\nexport default createStore(contactsReducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(<Provider store={store}>\n  <App />\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}